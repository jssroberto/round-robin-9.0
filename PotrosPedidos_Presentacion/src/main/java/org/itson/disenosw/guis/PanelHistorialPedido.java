package org.itson.disenosw.guis;

import control.ControlCarrito;
import control.ControlPedido;
import control.ProductosControl;
import dominio.MetodoPago;
import dominio.Producto;
import dominio.Usuario;
import dtos.DetalleProductoDTO;
import dtos.PedidoDTO;
import dtos.ProductoDTO;
import excepciones.BOException;
import excepciones.CafeteriaException;
import excepciones.PersistenciaException;
import interfaces.IControlCarrito;
import interfaces.IControlPedido;
import interfaces.IProductosControl;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.InputStream;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import org.bson.types.ObjectId;

/**
 *
 * @author Roberto García
 */
public class PanelHistorialPedido extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(PanelMenu.class.getName());

    FramePrincipal framePrincipal;
    private PedidoDTO pedidoDTO;
    private String idPedido;
    List<DetalleProductoDTO> detalleProductoDTOs;

    /**
     * Creates new form PanelHistorial
     */
    public PanelHistorialPedido(FramePrincipal framePrincipal) {
        this.framePrincipal = framePrincipal;
        this.idPedido = framePrincipal.getIdPedido();
        this.detalleProductoDTOs = new ArrayList<>();
        initComponents();
        try {
            consultarPedido();
            setFuentes();
            crearProductos();
        } catch (BOException | PersistenciaException ex) {
            framePrincipal.mostrarAviso("Aviso", ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMenu = new javax.swing.JButton();
        btnCarrito = new javax.swing.JButton();
        btnUsuario = new javax.swing.JButton();
        btnHistorial = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        lblNumPedido = new javax.swing.JLabel();
        lblCodigoRecoleccion = new javax.swing.JLabel();
        lblMetodoPago = new javax.swing.JLabel();
        lblArticulos = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        panelTop = new javax.swing.JPanel();
        lblFondo = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(400, 800));
        setMinimumSize(new java.awt.Dimension(400, 800));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnMenu.setBorder(null);
        btnMenu.setContentAreaFilled(false);
        btnMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });
        add(btnMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 65, 65));

        btnCarrito.setBorder(null);
        btnCarrito.setContentAreaFilled(false);
        btnCarrito.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarritoActionPerformed(evt);
            }
        });
        add(btnCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 18, 50, 50));

        btnUsuario.setBorder(null);
        btnUsuario.setContentAreaFilled(false);
        btnUsuario.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuarioActionPerformed(evt);
            }
        });
        add(btnUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 18, 50, 50));

        btnHistorial.setBorder(null);
        btnHistorial.setContentAreaFilled(false);
        btnHistorial.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistorialActionPerformed(evt);
            }
        });
        add(btnHistorial, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 18, 50, 50));

        btnRegresar.setBorder(null);
        btnRegresar.setContentAreaFilled(false);
        btnRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 702, 40, 40));

        btnAgregar.setBorder(null);
        btnAgregar.setContentAreaFilled(false);
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(219, 690, 171, 64));

        lblNumPedido.setForeground(new java.awt.Color(7, 7, 7));
        lblNumPedido.setText("jLabel1");
        add(lblNumPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 152, -1, -1));

        lblCodigoRecoleccion.setForeground(new java.awt.Color(7, 7, 7));
        lblCodigoRecoleccion.setText("jLabel1");
        add(lblCodigoRecoleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 183, -1, -1));

        lblMetodoPago.setForeground(new java.awt.Color(7, 7, 7));
        lblMetodoPago.setText("jLabel1");
        add(lblMetodoPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 214, -1, -1));

        lblArticulos.setForeground(new java.awt.Color(7, 7, 7));
        lblArticulos.setText("jLabel1");
        add(lblArticulos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 245, -1, -1));

        lblFecha.setForeground(new java.awt.Color(7, 7, 7));
        lblFecha.setText("jLabel1");
        add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 276, -1, -1));

        lblTotal.setForeground(new java.awt.Color(7, 7, 7));
        lblTotal.setText("jLabel1");
        add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 307, -1, -1));

        panelTop.setOpaque(false);
        add(panelTop, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 380, 340));

        lblFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/panelPedidopng.png"))); // NOI18N
        add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarritoActionPerformed
        framePrincipal.cambiarVistaCarrito();
    }//GEN-LAST:event_btnCarritoActionPerformed

    private void btnUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUsuarioActionPerformed

    private void btnHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistorialActionPerformed
        framePrincipal.cambiarPanelHistorial();
    }//GEN-LAST:event_btnHistorialActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        framePrincipal.cambiarPanelHistorial();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            agregarCarrito();
            framePrincipal.mostrarInformacion("Productos agregados al carrito", "Éxito");
            framePrincipal.cambiarVistaCarrito();
        } catch (CafeteriaException ex) {
            framePrincipal.mostrarAviso(ex.getMessage(), "Aviso");
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        framePrincipal.cambiarVistaMenu();
    }//GEN-LAST:event_btnMenuActionPerformed

    public void agregarCarrito() throws CafeteriaException {
        try {
            IControlPedido controlPedido = new ControlPedido();
            detalleProductoDTOs = controlPedido.consultarDetalleProductosPorIdPedido(framePrincipal.getIdPedido());

            List<ProductoDTO> productoDTOs = new ArrayList<>();
            IProductosControl controlProductos = new ProductosControl();
            IControlCarrito controlCarrito = new ControlCarrito();
            for (int i = 0; i < detalleProductoDTOs.size(); i++) {
                productoDTOs.add(controlProductos.consultarPorCodigo(detalleProductoDTOs.get(i).getCodigoProducto()));
                Usuario usuario = new Usuario();
                usuario.setId(new ObjectId(framePrincipal.getIdUsuario()));
                usuario.setIdCia(framePrincipal.getNumID());
                Producto producto = new Producto(productoDTOs.get(i).getId(),
                        detalleProductoDTOs.get(i).getCodigoProducto(),
                        productoDTOs.get(i).getNombre(),
                        productoDTOs.get(i).getPrecio(),
                        productoDTOs.get(i).getDescripcion(),
                        productoDTOs.get(i).getDireccionImagen());
                controlCarrito.agregarCarrito(usuario, producto, detalleProductoDTOs.get(i).getCantidad());
            }

        } catch (BOException | PersistenciaException ex) {
            Logger.getLogger(PanelHistorialPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void consultarPedido() throws BOException, PersistenciaException {
        IControlPedido controlPedido = new ControlPedido();
        pedidoDTO = controlPedido.consultarPorId(idPedido);
    }

    public void crearProductos() throws PersistenciaException, BOException {
        IControlPedido controlPedido = new ControlPedido();
        detalleProductoDTOs = controlPedido.consultarDetalleProductosPorIdPedido(framePrincipal.getIdPedido());

        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setOpaque(false);
        mainPanel.setMaximumSize(new Dimension(380, 340));
        mainPanel.setSize(new Dimension(380, 340));

        GridBagConstraints c = new GridBagConstraints();

        //TODO no jala el insertar elemento de arriba a abajo, empiezan del centro
        c.anchor = GridBagConstraints.NORTH;
        c.fill = GridBagConstraints.BOTH;

        // Iterar sobre la lista de productos y crear los paneles correspondientes
        for (int i = 0; i < detalleProductoDTOs.size(); i++) {

//            String[] producto = productosDTO.get(i);
            JPanel productoPanel = createProductoPanel(
                    detalleProductoDTOs.get(i).getNombre(),
                    detalleProductoDTOs.get(i).getPrecio(),
                    detalleProductoDTOs.get(i).getDireccionImagen());

//            String identificador = "producto_" + i;
            String identificador = detalleProductoDTOs.get(i).getCodigoProducto();
            productoPanel.putClientProperty(identificador, productoPanel);
//            String identificadorString = String.valueOf(identificador);
//            productoPanel.putClientProperty(i, idProducto);
            // Añade un ActionListener al panel de producto
            productoPanel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {

                    // Aquí puedes acceder al identificador del panel haciendo uso de la variable 'identificador'
                    framePrincipal.setIdProducto(identificador);
                    framePrincipal.cambiarVistaProducto();

                }
            });

            // Añade el panel del producto en la posición i * 2 (para dejar espacio para los separadores)
            c.gridx = 0;
            c.gridy = i * 2;
            mainPanel.add(productoPanel, c);

            // Añade un separador después de cada producto, excepto el último
            if (i < detalleProductoDTOs.size() - 1) {
                JPanel separatorPanel = createSeparatorPanel();
                c.gridx = 0;
                c.gridy = i * 2 + 1;
                mainPanel.add(separatorPanel, c);
            }

            productoPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        }

        //TODO hacer el scrollPane un ScrollPaneWin11
        // Configurar el JScrollPane para desplazamiento vertical
        JScrollPane scrollPane = new JScrollPane(mainPanel);
//        scrollPane.setLayout(new FlowLayout(FlowLayout.LEADING, 0, 0));

        scrollPane.setPreferredSize(new Dimension(380, 340)); // Establece un tamaño predeterminado
        scrollPane.setMaximumSize(new Dimension(380, 340)); // Establece un tamaño máximo
        scrollPane.getViewport().setPreferredSize(new Dimension(380, 340)); // Establece un tamaño predeterminado para el viewport
        scrollPane.getViewport().setMaximumSize(new Dimension(380, 340)); // Establece un tamaño mínimo para el viewport
        scrollPane.getViewport().setSize(380, 340);

        scrollPane.setOpaque(false); // Hacer el JScrollPane transparente
        scrollPane.getViewport().setOpaque(false); // Hacer transparente el viewport del JScrollPane
        scrollPane.setBorder(null); // Eliminar el borde del JScrollPane
        scrollPane.getVerticalScrollBar().setUnitIncrement(16); // Ajustar la velocidad del scroll vertical
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); // Ocultar la barra de desplazamiento horizontal

        JPanel cont = new JPanel(new FlowLayout(FlowLayout.LEADING, 0, 0));
        cont.add(scrollPane);
        cont.setOpaque(false);

        panelTop.setLayout(new FlowLayout(FlowLayout.LEADING, 0, 0));
        panelTop.add(cont);

    }

    /**
     * Crea un panel que muestra la información de un producto, incluyendo
     * nombre, precio e imagen.
     *
     * @param nombre El nombre del producto a mostrar.
     * @param precio El precio del producto a mostrar.
     * @param rutaImagen La ruta de la imagen del producto.
     * @return El panel del producto creado.
     */
    private JPanel createProductoPanel(String nombre, Float precio, String rutaImagen) {
        // Crear un nuevo panel para el producto con GridBagLayout
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false); // Hacer que el fondo del panel sea transparente

        // Configuración de GridBagConstraints para organizar los componentes dentro del panel
        GridBagConstraints c = new GridBagConstraints();

        String rutaFolder = "/productos/120x100/";
        StringBuilder rutaRelativa = new StringBuilder();
        rutaRelativa.append(rutaFolder);
        rutaRelativa.append(rutaImagen);

        // Cargar la imagen del producto
        ImageIcon icon = new ImageIcon(PanelMenu.class.getResource(String.valueOf(rutaRelativa)));
        JLabel imagenLabel = new JLabel(icon);

        Font sizedFontMedium = cargarFuente("/fonts/futura/FuturaPTMedium.otf", 24F);
        Font sizedFontBook = cargarFuente("/fonts/futura/FuturaPTBook.otf", 24F);

        // Configurar la etiqueta del nombre del producto
        JLabel nombreLabel = new JLabel(nombre);
        nombreLabel.setFont(sizedFontMedium);
        nombreLabel.setForeground(Color.BLACK);
        nombreLabel.setPreferredSize(new Dimension(250, 31));
        nombreLabel.setVerticalAlignment(SwingConstants.BOTTOM);

        String precioFormateado = String.valueOf(precio);
        if (precioFormateado.endsWith(".0")) {
            precioFormateado = precioFormateado.substring(0, precioFormateado.length() - 2);
        }
        // Configurar la etiqueta del precio
        JLabel precioLabel = new JLabel("$" + precioFormateado);
        precioLabel.setFont((sizedFontBook));
        precioLabel.setForeground(Color.BLACK);
        precioLabel.setPreferredSize(new Dimension(110, 31));
        precioLabel.setVerticalAlignment(SwingConstants.TOP);

        // Añadir la imagen a la parte derecha del panel
        c.gridx = 1;
        c.gridy = 0;
        c.gridheight = 2;
        c.fill = GridBagConstraints.BOTH;
        panel.add(imagenLabel, c);

        // Añadir la etiqueta del nombre del producto en la primera fila y primera columna
        c.gridx = 0;
        c.gridy = 0;
        c.gridheight = 1;
//        c.anchor = GridBagConstraints.CENTER; // Añadir esta línea para centrar horizontalmente
        panel.add(nombreLabel, c);

        // Añadir la etiqueta del precio en la segunda fila y primera columna
        c.gridx = 0;
        c.gridy = 1;
        panel.add(precioLabel, c);

        return panel; // Devuelve el panel del producto creado
    }

    /**
     * Crea un panel separador con una imagen personalizada. El panel separador
     * consiste en una imagen centrada verticalmente dentro de un panel que
     * actúa como un separador visual entre componentes.
     *
     * @return El panel separador creado.
     */
    private static JPanel createSeparatorPanel() {
        // Crear un nuevo panel para el separador
        JPanel panel = new JPanel();
        panel.setOpaque(false); // Hace que el panel sea transparente
        panel.setPreferredSize(new Dimension(350, 11)); // Establece el tamaño preferido del panel

        // Cargar la imagen del separador
        ImageIcon icon = new ImageIcon(PanelMenu.class.getResource("/separador.png"));

        // Crear una etiqueta para mostrar la imagen del separador
        JLabel imagen = new JLabel(icon);

        // Configurar el layout del panel como BoxLayout vertical
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        // Añadir pegamento vertical para centrar la imagen verticalmente
        panel.add(Box.createVerticalGlue());

        // Añadir la imagen al panel
        panel.add(imagen);

        // Añadir más pegamento vertical para centrar la imagen verticalmente
        panel.add(Box.createVerticalGlue());

        return panel; // Devuelve el panel separador creado
    }

    public void setFuentes() {
        lblNumPedido.setText("Pedido: #" + pedidoDTO.getEtiquetaPedido().toUpperCase());
        lblCodigoRecoleccion.setText("Clave de recolección: " + pedidoDTO.getClaveRecoleccion().toUpperCase());
        lblMetodoPago.setText("Método de pago: " + MetodoPago.getByCodigo(pedidoDTO.getMetodoPago()));
        lblArticulos.setText(pedidoDTO.getNumeroProductos() + " artículo(s)");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMM yyyy", Locale.of("es", "ES"));
        String fechaFormateada = pedidoDTO.getFecha().format(formatter);
        lblFecha.setText("Fecha: " + fechaFormateada);
        String totalFormateado = String.valueOf(pedidoDTO.getTotal());
        if (totalFormateado.endsWith(".0")) {
            totalFormateado = totalFormateado.substring(0, totalFormateado.length() - 2);
        }
        lblTotal.setText("Total: $" + totalFormateado);

        lblNumPedido.setFont(cargarFuente("/fonts/futura/FuturaPTDemi.otf", 24F));
        lblCodigoRecoleccion.setFont(cargarFuente("/fonts/futura/FuturaPTDemi.otf", 24F));
        lblMetodoPago.setFont(cargarFuente("/fonts/futura/FuturaPTMedium.otf", 24F));
        lblArticulos.setFont(cargarFuente("/fonts/futura/FuturaPTMedium.otf", 24F));
        lblFecha.setFont(cargarFuente("/fonts/futura/FuturaPTMedium.otf", 24F));
        lblTotal.setFont(cargarFuente("/fonts/futura/FuturaPTBook.otf", 24F));

    }

    /**
     * Carga una fuente desde un archivo de fuente TrueType (TTF) y la devuelve
     * con el tamaño especificado.
     *
     * @param rutaFuente La ruta del archivo de fuente TrueType (TTF).
     * @param size El tamaño de la fuente a cargar.
     * @return La fuente cargada con el tamaño especificado.
     * @throws IllegalArgumentException Si el archivo de fuente no se encuentra
     * en la ruta especificada.
     */
    private static Font cargarFuente(String rutaFuente, float size) throws IllegalArgumentException {
        InputStream is = PanelMenu.class.getResourceAsStream(rutaFuente);
        if (is == null) {
            throw new IllegalArgumentException("Archivo no encontrado: " + rutaFuente);
        }

        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, is);
            return font.deriveFont(size);
        } catch (FontFormatException | IOException ex) {
            logger.log(Level.SEVERE, "Error al cargar la fuente: " + rutaFuente, ex);
            return null;
        } finally {
            try {
                is.close();
            } catch (IOException ex) {
                logger.log(Level.SEVERE, "Error al cerrar InputStream", ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCarrito;
    private javax.swing.JButton btnHistorial;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JButton btnUsuario;
    private javax.swing.JLabel lblArticulos;
    private javax.swing.JLabel lblCodigoRecoleccion;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblMetodoPago;
    private javax.swing.JLabel lblNumPedido;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel panelTop;
    // End of variables declaration//GEN-END:variables

}